# -*- coding: utf-8 -*-
"""youtube_transcriber_summarizer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1reCJ5-RXZibj_9s8ZHch45qURJWgS6Cx
"""

# youtube_transcriber_summarizer.py

# ========================================
#  STEP 1: Install required packages
#  (Note: These lines are for notebooks, not pure .py files)
# ========================================
# !pip install yt-dlp openai
# !apt install ffmpeg -y

# ========================================
#  STEP 2: Import Libraries
# ========================================
import yt_dlp
import openai
import os
import pprint

# ========================================
#  STEP 3: Set OpenAI API Key
# ========================================
os.environ['OPENAI_API_KEY'] = 'sk-...your_api_key_here...'
openai.api_key = os.getenv('OPENAI_API_KEY')

# ========================================
#  STEP 4: Ask User for YouTube URL
# ========================================
url = input("Enter YouTube URL:\n")

# ========================================
#  STEP 5: Download audio using yt-dlp
# ========================================
ydl_opts = {
    'format': 'bestaudio/best',  # Get best audio available
    'outtmpl': '%(title)s.%(ext)s',  # Save using the video title as filename
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',  # Use ffmpeg to extract audio
        'preferredcodec': 'mp3',      # Save as mp3
        'preferredquality': '192',    # Set audio quality
    }],
}

with yt_dlp.YoutubeDL(ydl_opts) as ydl:
    info_dict = ydl.extract_info(url, download=True)  # Download and extract info
    video_title = ydl.prepare_filename(info_dict).rsplit('.', 1)[0]  # Remove file extension

# ========================================
#  STEP 6: Transcribe the audio using OpenAI Whisper
# ========================================
audio_file = f"{video_title}.mp3"

with open(audio_file, "rb") as f:
    transcript = openai.audio.transcriptions.create(
        model="whisper-1",
        file=f
    )

# ========================================
#  STEP 7: Save the transcript to a .txt file
# ========================================
transcript_filename = f"transcript-{video_title}.txt"
with open(transcript_filename, 'w', encoding='utf-8') as f:
    f.write(transcript.text)

print(f"\n‚úÖ Transcript saved as: {transcript_filename}")

# ========================================
#  STEP 8: Print original transcript (optional)
# ========================================
print("\nüìù Original Transcript:\n")
pprint.pprint(transcript.text)

# ========================================
#  STEP 9: Summarize in bullet points (English)
# ========================================
response = openai.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=[
        {"role": "system", "content": "You are good at creating bullet point summaries from large texts."},
        {"role": "user", "content": f"Summarize the following in bullet point form:\n{transcript.text}"}
    ]
)

print("\nüìå English Bullet Point Summary:\n")
print(response.choices[0].message.content)

# ========================================
#  STEP 10: Summarize in Arabic (as a Life Coach)
# ========================================
system_prompt = 'I want you to act as Arabic Life Coach.'
prompt = f'''
Create a summary of the following text in Arabic Language.
Text: {transcript.text}

Add a title to the summary in Arabic.
Your summary should be informative and factual, covering the most important aspects of the topic.
Start your summary with BULLET POINTS if possible and end the summary with a CONCLUSION PHRASE.
Please ensure the entire content is in Arabic.
'''

print('\nüß† Starting Arabic summarizing...')

response = openai.chat.completions.create(
    model='gpt-3.5-turbo',
    messages=[
        {'role': 'system', 'content': system_prompt},
        {'role': 'user', 'content': prompt}
    ],
    max_tokens=3000,
    temperature=0.3
)

print("\nüìù Arabic Summary:\n")
print(response.choices[0].message.content)

